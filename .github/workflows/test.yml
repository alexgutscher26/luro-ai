name: Automated Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Validate environment variables
        run: npm run env:validate
      
      - name: Type checking
        run: npm run type-check
      
      - name: Lint code
        run: npm run lint
      
      - name: Format check
        run: npm run format:check
      
      - name: Run unit tests with coverage
        run: npm run test:ci
      
      - name: Run accessibility tests
        run: npm run test:a11y:coverage
      
      - name: Run Vitest component tests
        run: npx vitest run --coverage
      
      - name: Upload test coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ matrix.node-version }}
          path: coverage/
      
      - name: Comment PR with test results
        if: github.event_name == 'pull_request' && matrix.node-version == '18'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let comment = '## üß™ Test Results\n\n';
            
            // Read Jest coverage summary
            if (fs.existsSync('./coverage/coverage-summary.json')) {
              const coverage = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
              const total = coverage.total;
              
              comment += '### üìä Code Coverage\n';
              comment += `- **Lines:** ${total.lines.pct}%\n`;
              comment += `- **Functions:** ${total.functions.pct}%\n`;
              comment += `- **Branches:** ${total.branches.pct}%\n`;
              comment += `- **Statements:** ${total.statements.pct}%\n\n`;
            }
            
            comment += '‚úÖ All tests passed successfully!\n';
            comment += '[View detailed results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  e2e-tests:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Start application
        run: npm start &
        env:
          NODE_ENV: test
      
      - name: Wait for application to be ready
        run: npx wait-on http://localhost:3000 --timeout 60000
      
      - name: Run Cypress E2E tests
        uses: cypress-io/github-action@v6
        with:
          start: npm start
          wait-on: 'http://localhost:3000'
          wait-on-timeout: 120
          browser: chrome
          record: true
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload Cypress screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
      
      - name: Upload Cypress videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos
          path: cypress/videos

  quality-gate:
    runs-on: ubuntu-latest
    needs: [test, e2e-tests]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.test.result }}" != "success" || "${{ needs.e2e-tests.result }}" != "success" ]]; then
            echo "‚ùå Tests failed - blocking merge"
            exit 1
          else
            echo "‚úÖ All tests passed - ready for merge"
          fi